<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="774" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="757.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="757.00"> </text><svg id="frames" x="10" width="1180" total_samples="76"><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (7 samples, 9.21%)</title><rect x="0.0000%" y="373" width="9.2105%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="7"/><text x="0.2500%" y="383.50">&lt;pprof::backt..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (7 samples, 9.21%)</title><rect x="0.0000%" y="357" width="9.2105%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="7"/><text x="0.2500%" y="367.50">backtrace::ba..</text></g><g><title>backtrace::backtrace::libunwind::trace (7 samples, 9.21%)</title><rect x="0.0000%" y="341" width="9.2105%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="7"/><text x="0.2500%" y="351.50">backtrace::ba..</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 2.63%)</title><rect x="9.2105%" y="325" width="2.6316%" height="15" fill="rgb(248,212,6)" fg:x="7" fg:w="2"/><text x="9.4605%" y="335.50">&lt;p..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 2.63%)</title><rect x="9.2105%" y="309" width="2.6316%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="2"/><text x="9.4605%" y="319.50">ba..</text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 2.63%)</title><rect x="9.2105%" y="293" width="2.6316%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="2"/><text x="9.4605%" y="303.50">ba..</text></g><g><title>alloc_from_pool::factory::Factory&lt;T&gt;::alloc (1 samples, 1.32%)</title><rect x="11.8421%" y="325" width="1.3158%" height="15" fill="rgb(207,160,47)" fg:x="9" fg:w="1"/><text x="12.0921%" y="335.50"></text></g><g><title>alloc_from_pool::alloc_in::alloc_in (1 samples, 1.32%)</title><rect x="11.8421%" y="309" width="1.3158%" height="15" fill="rgb(228,23,34)" fg:x="9" fg:w="1"/><text x="12.0921%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_unchecked (1 samples, 1.32%)</title><rect x="11.8421%" y="293" width="1.3158%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="1"/><text x="12.0921%" y="303.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="11.8421%" y="277" width="1.3158%" height="15" fill="rgb(220,122,19)" fg:x="9" fg:w="1"/><text x="12.0921%" y="287.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="11.8421%" y="261" width="1.3158%" height="15" fill="rgb(250,228,42)" fg:x="9" fg:w="1"/><text x="12.0921%" y="271.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="11.8421%" y="245" width="1.3158%" height="15" fill="rgb(240,193,28)" fg:x="9" fg:w="1"/><text x="12.0921%" y="255.50"></text></g><g><title>lib_ruby_parser::lexer::main::Lexer::newtok (1 samples, 1.32%)</title><rect x="13.1579%" y="309" width="1.3158%" height="15" fill="rgb(216,20,37)" fg:x="10" fg:w="1"/><text x="13.4079%" y="319.50"></text></g><g><title>&lt;lib_ruby_parser::token_buf::TokenBuf as core::default::Default&gt;::default (1 samples, 1.32%)</title><rect x="13.1579%" y="293" width="1.3158%" height="15" fill="rgb(206,188,39)" fg:x="10" fg:w="1"/><text x="13.4079%" y="303.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="13.1579%" y="277" width="1.3158%" height="15" fill="rgb(217,207,13)" fg:x="10" fg:w="1"/><text x="13.4079%" y="287.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="13.1579%" y="261" width="1.3158%" height="15" fill="rgb(231,73,38)" fg:x="10" fg:w="1"/><text x="13.4079%" y="271.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="13.1579%" y="245" width="1.3158%" height="15" fill="rgb(225,20,46)" fg:x="10" fg:w="1"/><text x="13.4079%" y="255.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 2.63%)</title><rect x="14.4737%" y="277" width="2.6316%" height="15" fill="rgb(210,31,41)" fg:x="11" fg:w="2"/><text x="14.7237%" y="287.50">&lt;p..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 2.63%)</title><rect x="14.4737%" y="261" width="2.6316%" height="15" fill="rgb(221,200,47)" fg:x="11" fg:w="2"/><text x="14.7237%" y="271.50">ba..</text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 2.63%)</title><rect x="14.4737%" y="245" width="2.6316%" height="15" fill="rgb(226,26,5)" fg:x="11" fg:w="2"/><text x="14.7237%" y="255.50">ba..</text></g><g><title>lib_ruby_parser::lexer::main::Lexer::nextc (3 samples, 3.95%)</title><rect x="14.4737%" y="309" width="3.9474%" height="15" fill="rgb(249,33,26)" fg:x="11" fg:w="3"/><text x="14.7237%" y="319.50">lib_..</text></g><g><title>lib_ruby_parser::source::buffer::Buffer::nextc (3 samples, 3.95%)</title><rect x="14.4737%" y="293" width="3.9474%" height="15" fill="rgb(235,183,28)" fg:x="11" fg:w="3"/><text x="14.7237%" y="303.50">lib_..</text></g><g><title>lib_ruby_parser::source::input::Input::byte_at (1 samples, 1.32%)</title><rect x="17.1053%" y="277" width="1.3158%" height="15" fill="rgb(221,5,38)" fg:x="13" fg:w="1"/><text x="17.3553%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 1.32%)</title><rect x="17.1053%" y="261" width="1.3158%" height="15" fill="rgb(247,18,42)" fg:x="13" fg:w="1"/><text x="17.3553%" y="271.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 1.32%)</title><rect x="17.1053%" y="245" width="1.3158%" height="15" fill="rgb(241,131,45)" fg:x="13" fg:w="1"/><text x="17.3553%" y="255.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 1.32%)</title><rect x="17.1053%" y="229" width="1.3158%" height="15" fill="rgb(249,31,29)" fg:x="13" fg:w="1"/><text x="17.3553%" y="239.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (1 samples, 1.32%)</title><rect x="17.1053%" y="213" width="1.3158%" height="15" fill="rgb(225,111,53)" fg:x="13" fg:w="1"/><text x="17.3553%" y="223.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="17.1053%" y="197" width="1.3158%" height="15" fill="rgb(238,160,17)" fg:x="13" fg:w="1"/><text x="17.3553%" y="207.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="17.1053%" y="181" width="1.3158%" height="15" fill="rgb(214,148,48)" fg:x="13" fg:w="1"/><text x="17.3553%" y="191.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="17.1053%" y="165" width="1.3158%" height="15" fill="rgb(232,36,49)" fg:x="13" fg:w="1"/><text x="17.3553%" y="175.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (1 samples, 1.32%)</title><rect x="18.4211%" y="277" width="1.3158%" height="15" fill="rgb(209,103,24)" fg:x="14" fg:w="1"/><text x="18.6711%" y="287.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="18.4211%" y="261" width="1.3158%" height="15" fill="rgb(229,88,8)" fg:x="14" fg:w="1"/><text x="18.6711%" y="271.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="18.4211%" y="245" width="1.3158%" height="15" fill="rgb(213,181,19)" fg:x="14" fg:w="1"/><text x="18.6711%" y="255.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="18.4211%" y="229" width="1.3158%" height="15" fill="rgb(254,191,54)" fg:x="14" fg:w="1"/><text x="18.6711%" y="239.50"></text></g><g><title>lib_ruby_parser::lexer::parse_atmark::&lt;impl lib_ruby_parser::lexer::main::Lexer&gt;::parse_atmark (2 samples, 2.63%)</title><rect x="18.4211%" y="309" width="2.6316%" height="15" fill="rgb(241,83,37)" fg:x="14" fg:w="2"/><text x="18.6711%" y="319.50">li..</text></g><g><title>lib_ruby_parser::lexer::main::Lexer::tokadd_ident (2 samples, 2.63%)</title><rect x="18.4211%" y="293" width="2.6316%" height="15" fill="rgb(233,36,39)" fg:x="14" fg:w="2"/><text x="18.6711%" y="303.50">li..</text></g><g><title>lib_ruby_parser::lexer::main::Lexer::tokadd_mbchar (1 samples, 1.32%)</title><rect x="19.7368%" y="277" width="1.3158%" height="15" fill="rgb(226,3,54)" fg:x="15" fg:w="1"/><text x="19.9868%" y="287.50"></text></g><g><title>&lt;lib_ruby_parser::lexer::main::Lexer as lib_ruby_parser::lexer::tokadd::TokAdd&lt;lib_ruby_parser::maybe_byte::MaybeByte&gt;&gt;::tokadd (1 samples, 1.32%)</title><rect x="19.7368%" y="261" width="1.3158%" height="15" fill="rgb(245,192,40)" fg:x="15" fg:w="1"/><text x="19.9868%" y="271.50"></text></g><g><title>&lt;lib_ruby_parser::lexer::main::Lexer as lib_ruby_parser::lexer::tokadd::TokAdd&lt;u8&gt;&gt;::tokadd (1 samples, 1.32%)</title><rect x="19.7368%" y="245" width="1.3158%" height="15" fill="rgb(238,167,29)" fg:x="15" fg:w="1"/><text x="19.9868%" y="255.50"></text></g><g><title>lib_ruby_parser::token_buf::TokenBuf::push (1 samples, 1.32%)</title><rect x="19.7368%" y="229" width="1.3158%" height="15" fill="rgb(232,182,51)" fg:x="15" fg:w="1"/><text x="19.9868%" y="239.50"></text></g><g><title>lib_ruby_parser_ast::bytes::Bytes::push (1 samples, 1.32%)</title><rect x="19.7368%" y="213" width="1.3158%" height="15" fill="rgb(231,60,39)" fg:x="15" fg:w="1"/><text x="19.9868%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 1.32%)</title><rect x="19.7368%" y="197" width="1.3158%" height="15" fill="rgb(208,69,12)" fg:x="15" fg:w="1"/><text x="19.9868%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 1.32%)</title><rect x="19.7368%" y="181" width="1.3158%" height="15" fill="rgb(235,93,37)" fg:x="15" fg:w="1"/><text x="19.9868%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 1.32%)</title><rect x="19.7368%" y="165" width="1.3158%" height="15" fill="rgb(213,116,39)" fg:x="15" fg:w="1"/><text x="19.9868%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 1.32%)</title><rect x="19.7368%" y="149" width="1.3158%" height="15" fill="rgb(222,207,29)" fg:x="15" fg:w="1"/><text x="19.9868%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 1.32%)</title><rect x="19.7368%" y="133" width="1.3158%" height="15" fill="rgb(206,96,30)" fg:x="15" fg:w="1"/><text x="19.9868%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 1.32%)</title><rect x="19.7368%" y="117" width="1.3158%" height="15" fill="rgb(218,138,4)" fg:x="15" fg:w="1"/><text x="19.9868%" y="127.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 1.32%)</title><rect x="19.7368%" y="101" width="1.3158%" height="15" fill="rgb(250,191,14)" fg:x="15" fg:w="1"/><text x="19.9868%" y="111.50"></text></g><g><title>realloc (1 samples, 1.32%)</title><rect x="19.7368%" y="85" width="1.3158%" height="15" fill="rgb(239,60,40)" fg:x="15" fg:w="1"/><text x="19.9868%" y="95.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="19.7368%" y="69" width="1.3158%" height="15" fill="rgb(206,27,48)" fg:x="15" fg:w="1"/><text x="19.9868%" y="79.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="19.7368%" y="53" width="1.3158%" height="15" fill="rgb(225,35,8)" fg:x="15" fg:w="1"/><text x="19.9868%" y="63.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="19.7368%" y="37" width="1.3158%" height="15" fill="rgb(250,213,24)" fg:x="15" fg:w="1"/><text x="19.9868%" y="47.50"></text></g><g><title>lib_ruby_parser::lexer::parse_heredoc::&lt;impl lib_ruby_parser::lexer::main::Lexer&gt;::here_document (1 samples, 1.32%)</title><rect x="21.0526%" y="309" width="1.3158%" height="15" fill="rgb(247,123,22)" fg:x="16" fg:w="1"/><text x="21.3026%" y="319.50"></text></g><g><title>lib_ruby_parser::lexer::parse_string::&lt;impl lib_ruby_parser::lexer::main::Lexer&gt;::tokadd_string (1 samples, 1.32%)</title><rect x="21.0526%" y="293" width="1.3158%" height="15" fill="rgb(231,138,38)" fg:x="16" fg:w="1"/><text x="21.3026%" y="303.50"></text></g><g><title>&lt;lib_ruby_parser::maybe_byte::MaybeByte as core::cmp::PartialEq&lt;core::option::Option&lt;u8&gt;&gt;&gt;::eq (1 samples, 1.32%)</title><rect x="21.0526%" y="277" width="1.3158%" height="15" fill="rgb(231,145,46)" fg:x="16" fg:w="1"/><text x="21.3026%" y="287.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="21.0526%" y="261" width="1.3158%" height="15" fill="rgb(251,118,11)" fg:x="16" fg:w="1"/><text x="21.3026%" y="271.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="21.0526%" y="245" width="1.3158%" height="15" fill="rgb(217,147,25)" fg:x="16" fg:w="1"/><text x="21.3026%" y="255.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="21.0526%" y="229" width="1.3158%" height="15" fill="rgb(247,81,37)" fg:x="16" fg:w="1"/><text x="21.3026%" y="239.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 2.63%)</title><rect x="22.3684%" y="293" width="2.6316%" height="15" fill="rgb(209,12,38)" fg:x="17" fg:w="2"/><text x="22.6184%" y="303.50">&lt;p..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 2.63%)</title><rect x="22.3684%" y="277" width="2.6316%" height="15" fill="rgb(227,1,9)" fg:x="17" fg:w="2"/><text x="22.6184%" y="287.50">ba..</text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 2.63%)</title><rect x="22.3684%" y="261" width="2.6316%" height="15" fill="rgb(248,47,43)" fg:x="17" fg:w="2"/><text x="22.6184%" y="271.50">ba..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 1.32%)</title><rect x="25.0000%" y="181" width="1.3158%" height="15" fill="rgb(221,10,30)" fg:x="19" fg:w="1"/><text x="25.2500%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 1.32%)</title><rect x="25.0000%" y="165" width="1.3158%" height="15" fill="rgb(210,229,1)" fg:x="19" fg:w="1"/><text x="25.2500%" y="175.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="25.0000%" y="149" width="1.3158%" height="15" fill="rgb(222,148,37)" fg:x="19" fg:w="1"/><text x="25.2500%" y="159.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="25.0000%" y="133" width="1.3158%" height="15" fill="rgb(234,67,33)" fg:x="19" fg:w="1"/><text x="25.2500%" y="143.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="25.0000%" y="117" width="1.3158%" height="15" fill="rgb(247,98,35)" fg:x="19" fg:w="1"/><text x="25.2500%" y="127.50"></text></g><g><title>lib_ruby_parser::lexer::main::Lexer::is_lvar_defined (2 samples, 2.63%)</title><rect x="25.0000%" y="293" width="2.6316%" height="15" fill="rgb(247,138,52)" fg:x="19" fg:w="2"/><text x="25.2500%" y="303.50">li..</text></g><g><title>lib_ruby_parser::static_environment::StaticEnvironment::is_declared (2 samples, 2.63%)</title><rect x="25.0000%" y="277" width="2.6316%" height="15" fill="rgb(213,79,30)" fg:x="19" fg:w="2"/><text x="25.2500%" y="287.50">li..</text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::get (2 samples, 2.63%)</title><rect x="25.0000%" y="261" width="2.6316%" height="15" fill="rgb(246,177,23)" fg:x="19" fg:w="2"/><text x="25.2500%" y="271.50">al..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,alloc::collections::btree::set_val::SetValZST,A&gt; as alloc::collections::btree::Recover&lt;Q&gt;&gt;::get (2 samples, 2.63%)</title><rect x="25.0000%" y="245" width="2.6316%" height="15" fill="rgb(230,62,27)" fg:x="19" fg:w="2"/><text x="25.2500%" y="255.50">&lt;a..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (2 samples, 2.63%)</title><rect x="25.0000%" y="229" width="2.6316%" height="15" fill="rgb(216,154,8)" fg:x="19" fg:w="2"/><text x="25.2500%" y="239.50">al..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (2 samples, 2.63%)</title><rect x="25.0000%" y="213" width="2.6316%" height="15" fill="rgb(244,35,45)" fg:x="19" fg:w="2"/><text x="25.2500%" y="223.50">al..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (2 samples, 2.63%)</title><rect x="25.0000%" y="197" width="2.6316%" height="15" fill="rgb(251,115,12)" fg:x="19" fg:w="2"/><text x="25.2500%" y="207.50">al..</text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (1 samples, 1.32%)</title><rect x="26.3158%" y="181" width="1.3158%" height="15" fill="rgb(240,54,50)" fg:x="20" fg:w="1"/><text x="26.5658%" y="191.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (1 samples, 1.32%)</title><rect x="26.3158%" y="165" width="1.3158%" height="15" fill="rgb(233,84,52)" fg:x="20" fg:w="1"/><text x="26.5658%" y="175.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (1 samples, 1.32%)</title><rect x="26.3158%" y="149" width="1.3158%" height="15" fill="rgb(207,117,47)" fg:x="20" fg:w="1"/><text x="26.5658%" y="159.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="26.3158%" y="133" width="1.3158%" height="15" fill="rgb(249,43,39)" fg:x="20" fg:w="1"/><text x="26.5658%" y="143.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="26.3158%" y="117" width="1.3158%" height="15" fill="rgb(209,38,44)" fg:x="20" fg:w="1"/><text x="26.5658%" y="127.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="26.3158%" y="101" width="1.3158%" height="15" fill="rgb(236,212,23)" fg:x="20" fg:w="1"/><text x="26.5658%" y="111.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="27.6316%" y="229" width="1.3158%" height="15" fill="rgb(242,79,21)" fg:x="21" fg:w="1"/><text x="27.8816%" y="239.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="27.6316%" y="213" width="1.3158%" height="15" fill="rgb(211,96,35)" fg:x="21" fg:w="1"/><text x="27.8816%" y="223.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="27.6316%" y="197" width="1.3158%" height="15" fill="rgb(253,215,40)" fg:x="21" fg:w="1"/><text x="27.8816%" y="207.50"></text></g><g><title>&lt;lib_ruby_parser::lexer::main::Lexer as lib_ruby_parser::lexer::tokadd::TokAdd&lt;lib_ruby_parser::maybe_byte::MaybeByte&gt;&gt;::tokadd (2 samples, 2.63%)</title><rect x="27.6316%" y="277" width="2.6316%" height="15" fill="rgb(211,81,21)" fg:x="21" fg:w="2"/><text x="27.8816%" y="287.50">&lt;l..</text></g><g><title>&lt;lib_ruby_parser::lexer::main::Lexer as lib_ruby_parser::lexer::tokadd::TokAdd&lt;u8&gt;&gt;::tokadd (2 samples, 2.63%)</title><rect x="27.6316%" y="261" width="2.6316%" height="15" fill="rgb(208,190,38)" fg:x="21" fg:w="2"/><text x="27.8816%" y="271.50">&lt;l..</text></g><g><title>lib_ruby_parser::token_buf::TokenBuf::push (2 samples, 2.63%)</title><rect x="27.6316%" y="245" width="2.6316%" height="15" fill="rgb(235,213,38)" fg:x="21" fg:w="2"/><text x="27.8816%" y="255.50">li..</text></g><g><title>lib_ruby_parser_ast::bytes::Bytes::push (1 samples, 1.32%)</title><rect x="28.9474%" y="229" width="1.3158%" height="15" fill="rgb(237,122,38)" fg:x="22" fg:w="1"/><text x="29.1974%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 1.32%)</title><rect x="28.9474%" y="213" width="1.3158%" height="15" fill="rgb(244,218,35)" fg:x="22" fg:w="1"/><text x="29.1974%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 1.32%)</title><rect x="28.9474%" y="197" width="1.3158%" height="15" fill="rgb(240,68,47)" fg:x="22" fg:w="1"/><text x="29.1974%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 1.32%)</title><rect x="28.9474%" y="181" width="1.3158%" height="15" fill="rgb(210,16,53)" fg:x="22" fg:w="1"/><text x="29.1974%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 1.32%)</title><rect x="28.9474%" y="165" width="1.3158%" height="15" fill="rgb(235,124,12)" fg:x="22" fg:w="1"/><text x="29.1974%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 1.32%)</title><rect x="28.9474%" y="149" width="1.3158%" height="15" fill="rgb(224,169,11)" fg:x="22" fg:w="1"/><text x="29.1974%" y="159.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="28.9474%" y="133" width="1.3158%" height="15" fill="rgb(250,166,2)" fg:x="22" fg:w="1"/><text x="29.1974%" y="143.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="28.9474%" y="117" width="1.3158%" height="15" fill="rgb(242,216,29)" fg:x="22" fg:w="1"/><text x="29.1974%" y="127.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="28.9474%" y="101" width="1.3158%" height="15" fill="rgb(230,116,27)" fg:x="22" fg:w="1"/><text x="29.1974%" y="111.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="30.2632%" y="277" width="1.3158%" height="15" fill="rgb(228,99,48)" fg:x="23" fg:w="1"/><text x="30.5132%" y="287.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="30.2632%" y="261" width="1.3158%" height="15" fill="rgb(253,11,6)" fg:x="23" fg:w="1"/><text x="30.5132%" y="271.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="30.2632%" y="245" width="1.3158%" height="15" fill="rgb(247,143,39)" fg:x="23" fg:w="1"/><text x="30.5132%" y="255.50"></text></g><g><title>lib_ruby_parser::lexer::main::Lexer::tokadd_mbchar (4 samples, 5.26%)</title><rect x="27.6316%" y="293" width="5.2632%" height="15" fill="rgb(236,97,10)" fg:x="21" fg:w="4"/><text x="27.8816%" y="303.50">lib_ru..</text></g><g><title>lib_ruby_parser::lexer::main::Lexer::multibyte_char_len (1 samples, 1.32%)</title><rect x="31.5789%" y="277" width="1.3158%" height="15" fill="rgb(233,208,19)" fg:x="24" fg:w="1"/><text x="31.8289%" y="287.50"></text></g><g><title>lib_ruby_parser::lexer::main::Lexer::_multibyte_char_len (1 samples, 1.32%)</title><rect x="31.5789%" y="261" width="1.3158%" height="15" fill="rgb(216,164,2)" fg:x="24" fg:w="1"/><text x="31.8289%" y="271.50"></text></g><g><title>lib_ruby_parser::source::buffer::Buffer::substr_at (1 samples, 1.32%)</title><rect x="31.5789%" y="245" width="1.3158%" height="15" fill="rgb(220,129,5)" fg:x="24" fg:w="1"/><text x="31.8289%" y="255.50"></text></g><g><title>lib_ruby_parser::source::input::Input::substr_at (1 samples, 1.32%)</title><rect x="31.5789%" y="229" width="1.3158%" height="15" fill="rgb(242,17,10)" fg:x="24" fg:w="1"/><text x="31.8289%" y="239.50"></text></g><g><title>lib_ruby_parser::source::decoded_input::DecodedInput::substr_at (1 samples, 1.32%)</title><rect x="31.5789%" y="213" width="1.3158%" height="15" fill="rgb(242,107,0)" fg:x="24" fg:w="1"/><text x="31.8289%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 1.32%)</title><rect x="31.5789%" y="197" width="1.3158%" height="15" fill="rgb(251,28,31)" fg:x="24" fg:w="1"/><text x="31.8289%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 1.32%)</title><rect x="31.5789%" y="181" width="1.3158%" height="15" fill="rgb(233,223,10)" fg:x="24" fg:w="1"/><text x="31.8289%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 1.32%)</title><rect x="31.5789%" y="165" width="1.3158%" height="15" fill="rgb(215,21,27)" fg:x="24" fg:w="1"/><text x="31.8289%" y="175.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="31.5789%" y="149" width="1.3158%" height="15" fill="rgb(232,23,21)" fg:x="24" fg:w="1"/><text x="31.8289%" y="159.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="31.5789%" y="133" width="1.3158%" height="15" fill="rgb(244,5,23)" fg:x="24" fg:w="1"/><text x="31.8289%" y="143.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="31.5789%" y="117" width="1.3158%" height="15" fill="rgb(226,81,46)" fg:x="24" fg:w="1"/><text x="31.8289%" y="127.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="32.8947%" y="261" width="1.3158%" height="15" fill="rgb(247,70,30)" fg:x="25" fg:w="1"/><text x="33.1447%" y="271.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="32.8947%" y="245" width="1.3158%" height="15" fill="rgb(212,68,19)" fg:x="25" fg:w="1"/><text x="33.1447%" y="255.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="32.8947%" y="229" width="1.3158%" height="15" fill="rgb(240,187,13)" fg:x="25" fg:w="1"/><text x="33.1447%" y="239.50"></text></g><g><title>lib_ruby_parser::lexer::parse_ident::&lt;impl lib_ruby_parser::lexer::main::Lexer&gt;::is_identchar (3 samples, 3.95%)</title><rect x="32.8947%" y="293" width="3.9474%" height="15" fill="rgb(223,113,26)" fg:x="25" fg:w="3"/><text x="33.1447%" y="303.50">lib_..</text></g><g><title>lib_ruby_parser::source::buffer::Buffer::is_identchar (3 samples, 3.95%)</title><rect x="32.8947%" y="277" width="3.9474%" height="15" fill="rgb(206,192,2)" fg:x="25" fg:w="3"/><text x="33.1447%" y="287.50">lib_..</text></g><g><title>lib_ruby_parser::source::input::Input::byte_at (2 samples, 2.63%)</title><rect x="34.2105%" y="261" width="2.6316%" height="15" fill="rgb(241,108,4)" fg:x="26" fg:w="2"/><text x="34.4605%" y="271.50">li..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2 samples, 2.63%)</title><rect x="34.2105%" y="245" width="2.6316%" height="15" fill="rgb(247,173,49)" fg:x="26" fg:w="2"/><text x="34.4605%" y="255.50">co..</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 2.63%)</title><rect x="34.2105%" y="229" width="2.6316%" height="15" fill="rgb(224,114,35)" fg:x="26" fg:w="2"/><text x="34.4605%" y="239.50">&lt;p..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 2.63%)</title><rect x="34.2105%" y="213" width="2.6316%" height="15" fill="rgb(245,159,27)" fg:x="26" fg:w="2"/><text x="34.4605%" y="223.50">ba..</text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 2.63%)</title><rect x="34.2105%" y="197" width="2.6316%" height="15" fill="rgb(245,172,44)" fg:x="26" fg:w="2"/><text x="34.4605%" y="207.50">ba..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 2.63%)</title><rect x="36.8421%" y="245" width="2.6316%" height="15" fill="rgb(236,23,11)" fg:x="28" fg:w="2"/><text x="37.0921%" y="255.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 2.63%)</title><rect x="36.8421%" y="229" width="2.6316%" height="15" fill="rgb(205,117,38)" fg:x="28" fg:w="2"/><text x="37.0921%" y="239.50">al..</text></g><g><title>alloc::slice::hack::to_vec (2 samples, 2.63%)</title><rect x="36.8421%" y="213" width="2.6316%" height="15" fill="rgb(237,72,25)" fg:x="28" fg:w="2"/><text x="37.0921%" y="223.50">al..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 2.63%)</title><rect x="36.8421%" y="197" width="2.6316%" height="15" fill="rgb(244,70,9)" fg:x="28" fg:w="2"/><text x="37.0921%" y="207.50">&lt;T..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 2.63%)</title><rect x="36.8421%" y="181" width="2.6316%" height="15" fill="rgb(217,125,39)" fg:x="28" fg:w="2"/><text x="37.0921%" y="191.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 2.63%)</title><rect x="36.8421%" y="165" width="2.6316%" height="15" fill="rgb(235,36,10)" fg:x="28" fg:w="2"/><text x="37.0921%" y="175.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 2.63%)</title><rect x="36.8421%" y="149" width="2.6316%" height="15" fill="rgb(251,123,47)" fg:x="28" fg:w="2"/><text x="37.0921%" y="159.50">al..</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 2.63%)</title><rect x="36.8421%" y="133" width="2.6316%" height="15" fill="rgb(221,13,13)" fg:x="28" fg:w="2"/><text x="37.0921%" y="143.50">&lt;p..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 2.63%)</title><rect x="36.8421%" y="117" width="2.6316%" height="15" fill="rgb(238,131,9)" fg:x="28" fg:w="2"/><text x="37.0921%" y="127.50">ba..</text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 2.63%)</title><rect x="36.8421%" y="101" width="2.6316%" height="15" fill="rgb(211,50,8)" fg:x="28" fg:w="2"/><text x="37.0921%" y="111.50">ba..</text></g><g><title>lib_ruby_parser::lexer::parse_ident::&lt;impl lib_ruby_parser::lexer::main::Lexer&gt;::parse_ident (14 samples, 18.42%)</title><rect x="22.3684%" y="309" width="18.4211%" height="15" fill="rgb(245,182,24)" fg:x="17" fg:w="14"/><text x="22.6184%" y="319.50">lib_ruby_parser::lexer::parse..</text></g><g><title>lib_ruby_parser::lexer::parse_ident::&lt;impl lib_ruby_parser::lexer::main::Lexer&gt;::tokenize_ident (3 samples, 3.95%)</title><rect x="36.8421%" y="293" width="3.9474%" height="15" fill="rgb(242,14,37)" fg:x="28" fg:w="3"/><text x="37.0921%" y="303.50">lib_..</text></g><g><title>lib_ruby_parser::lexer::yylval::&lt;impl lib_ruby_parser::lexer::main::Lexer&gt;::set_yylval_name (3 samples, 3.95%)</title><rect x="36.8421%" y="277" width="3.9474%" height="15" fill="rgb(246,228,12)" fg:x="28" fg:w="3"/><text x="37.0921%" y="287.50">lib_..</text></g><g><title>&lt;lib_ruby_parser_ast::bytes::Bytes as core::clone::Clone&gt;::clone (3 samples, 3.95%)</title><rect x="36.8421%" y="261" width="3.9474%" height="15" fill="rgb(213,55,15)" fg:x="28" fg:w="3"/><text x="37.0921%" y="271.50">&lt;lib..</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="39.4737%" y="245" width="1.3158%" height="15" fill="rgb(209,9,3)" fg:x="30" fg:w="1"/><text x="39.7237%" y="255.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="39.4737%" y="229" width="1.3158%" height="15" fill="rgb(230,59,30)" fg:x="30" fg:w="1"/><text x="39.7237%" y="239.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="39.4737%" y="213" width="1.3158%" height="15" fill="rgb(209,121,21)" fg:x="30" fg:w="1"/><text x="39.7237%" y="223.50"></text></g><g><title>&lt;lib_ruby_parser::maybe_byte::MaybeByte as core::cmp::PartialEq&lt;u8&gt;&gt;::eq (1 samples, 1.32%)</title><rect x="40.7895%" y="293" width="1.3158%" height="15" fill="rgb(220,109,13)" fg:x="31" fg:w="1"/><text x="41.0395%" y="303.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="40.7895%" y="277" width="1.3158%" height="15" fill="rgb(232,18,1)" fg:x="31" fg:w="1"/><text x="41.0395%" y="287.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="40.7895%" y="261" width="1.3158%" height="15" fill="rgb(215,41,42)" fg:x="31" fg:w="1"/><text x="41.0395%" y="271.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="40.7895%" y="245" width="1.3158%" height="15" fill="rgb(224,123,36)" fg:x="31" fg:w="1"/><text x="41.0395%" y="255.50"></text></g><g><title>lib_ruby_parser::lexer::parse_magic_comment::&lt;impl lib_ruby_parser::lexer::main::Lexer&gt;::magic_comment (2 samples, 2.63%)</title><rect x="40.7895%" y="309" width="2.6316%" height="15" fill="rgb(240,125,3)" fg:x="31" fg:w="2"/><text x="41.0395%" y="319.50">li..</text></g><g><title>lib_ruby_parser::lexer::parse_magic_comment::&lt;impl lib_ruby_parser::lexer::main::Lexer&gt;::magic_comment_marker (1 samples, 1.32%)</title><rect x="42.1053%" y="293" width="1.3158%" height="15" fill="rgb(205,98,50)" fg:x="32" fg:w="1"/><text x="42.3553%" y="303.50"></text></g><g><title>lib_ruby_parser::lexer::main::Lexer::char_at (1 samples, 1.32%)</title><rect x="42.1053%" y="277" width="1.3158%" height="15" fill="rgb(205,185,37)" fg:x="32" fg:w="1"/><text x="42.3553%" y="287.50"></text></g><g><title>lib_ruby_parser::source::buffer::Buffer::byte_at (1 samples, 1.32%)</title><rect x="42.1053%" y="261" width="1.3158%" height="15" fill="rgb(238,207,15)" fg:x="32" fg:w="1"/><text x="42.3553%" y="271.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="42.1053%" y="245" width="1.3158%" height="15" fill="rgb(213,199,42)" fg:x="32" fg:w="1"/><text x="42.3553%" y="255.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="42.1053%" y="229" width="1.3158%" height="15" fill="rgb(235,201,11)" fg:x="32" fg:w="1"/><text x="42.3553%" y="239.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="42.1053%" y="213" width="1.3158%" height="15" fill="rgb(207,46,11)" fg:x="32" fg:w="1"/><text x="42.3553%" y="223.50"></text></g><g><title>&lt;lib_ruby_parser::maybe_byte::MaybeByte as core::cmp::PartialEq&lt;core::option::Option&lt;u8&gt;&gt;&gt;::eq (1 samples, 1.32%)</title><rect x="43.4211%" y="277" width="1.3158%" height="15" fill="rgb(241,35,35)" fg:x="33" fg:w="1"/><text x="43.6711%" y="287.50"></text></g><g><title>lib_ruby_parser::maybe_byte::MaybeByte::as_option (1 samples, 1.32%)</title><rect x="43.4211%" y="261" width="1.3158%" height="15" fill="rgb(243,32,47)" fg:x="33" fg:w="1"/><text x="43.6711%" y="271.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="43.4211%" y="245" width="1.3158%" height="15" fill="rgb(247,202,23)" fg:x="33" fg:w="1"/><text x="43.6711%" y="255.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="43.4211%" y="229" width="1.3158%" height="15" fill="rgb(219,102,11)" fg:x="33" fg:w="1"/><text x="43.6711%" y="239.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="43.4211%" y="213" width="1.3158%" height="15" fill="rgb(243,110,44)" fg:x="33" fg:w="1"/><text x="43.6711%" y="223.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="44.7368%" y="277" width="1.3158%" height="15" fill="rgb(222,74,54)" fg:x="34" fg:w="1"/><text x="44.9868%" y="287.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="44.7368%" y="261" width="1.3158%" height="15" fill="rgb(216,99,12)" fg:x="34" fg:w="1"/><text x="44.9868%" y="271.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="44.7368%" y="245" width="1.3158%" height="15" fill="rgb(226,22,26)" fg:x="34" fg:w="1"/><text x="44.9868%" y="255.50"></text></g><g><title>lib_ruby_parser::lexer::parse_string::&lt;impl lib_ruby_parser::lexer::main::Lexer&gt;::parse_string (3 samples, 3.95%)</title><rect x="43.4211%" y="309" width="3.9474%" height="15" fill="rgb(217,163,10)" fg:x="33" fg:w="3"/><text x="43.6711%" y="319.50">lib_..</text></g><g><title>lib_ruby_parser::lexer::parse_string::&lt;impl lib_ruby_parser::lexer::main::Lexer&gt;::tokadd_string (3 samples, 3.95%)</title><rect x="43.4211%" y="293" width="3.9474%" height="15" fill="rgb(213,25,53)" fg:x="33" fg:w="3"/><text x="43.6711%" y="303.50">lib_..</text></g><g><title>lib_ruby_parser::maybe_byte::MaybeByte::is_eof (1 samples, 1.32%)</title><rect x="46.0526%" y="277" width="1.3158%" height="15" fill="rgb(252,105,26)" fg:x="35" fg:w="1"/><text x="46.3026%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 1.32%)</title><rect x="46.0526%" y="261" width="1.3158%" height="15" fill="rgb(220,39,43)" fg:x="35" fg:w="1"/><text x="46.3026%" y="271.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="46.0526%" y="245" width="1.3158%" height="15" fill="rgb(229,68,48)" fg:x="35" fg:w="1"/><text x="46.3026%" y="255.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="46.0526%" y="229" width="1.3158%" height="15" fill="rgb(252,8,32)" fg:x="35" fg:w="1"/><text x="46.3026%" y="239.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="46.0526%" y="213" width="1.3158%" height="15" fill="rgb(223,20,43)" fg:x="35" fg:w="1"/><text x="46.3026%" y="223.50"></text></g><g><title>lib_ruby_parser::parser::parse::Parser::next_token (30 samples, 39.47%)</title><rect x="9.2105%" y="373" width="39.4737%" height="15" fill="rgb(229,81,49)" fg:x="7" fg:w="30"/><text x="9.4605%" y="383.50">lib_ruby_parser::parser::parse::Parser::next_token</text></g><g><title>lib_ruby_parser::parser::parse::Parser::yylex (30 samples, 39.47%)</title><rect x="9.2105%" y="357" width="39.4737%" height="15" fill="rgb(236,28,36)" fg:x="7" fg:w="30"/><text x="9.4605%" y="367.50">lib_ruby_parser::parser::parse::Parser::yylex</text></g><g><title>lib_ruby_parser::lexer::main::Lexer::yylex (30 samples, 39.47%)</title><rect x="9.2105%" y="341" width="39.4737%" height="15" fill="rgb(249,185,26)" fg:x="7" fg:w="30"/><text x="9.4605%" y="351.50">lib_ruby_parser::lexer::main::Lexer::yylex</text></g><g><title>lib_ruby_parser::lexer::main::Lexer::parser_yylex (27 samples, 35.53%)</title><rect x="13.1579%" y="325" width="35.5263%" height="15" fill="rgb(249,174,33)" fg:x="10" fg:w="27"/><text x="13.4079%" y="335.50">lib_ruby_parser::lexer::main::Lexer::parser_yylex</text></g><g><title>lib_ruby_parser::maybe_byte::MaybeByte::is_eof (1 samples, 1.32%)</title><rect x="47.3684%" y="309" width="1.3158%" height="15" fill="rgb(233,201,37)" fg:x="36" fg:w="1"/><text x="47.6184%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 1.32%)</title><rect x="47.3684%" y="293" width="1.3158%" height="15" fill="rgb(221,78,26)" fg:x="36" fg:w="1"/><text x="47.6184%" y="303.50"></text></g><g><title>&lt;lib_ruby_parser::maybe_byte::MaybeByte as core::cmp::PartialEq&gt;::eq (1 samples, 1.32%)</title><rect x="47.3684%" y="277" width="1.3158%" height="15" fill="rgb(250,127,30)" fg:x="36" fg:w="1"/><text x="47.6184%" y="287.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 1.32%)</title><rect x="47.3684%" y="261" width="1.3158%" height="15" fill="rgb(230,49,44)" fg:x="36" fg:w="1"/><text x="47.6184%" y="271.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="47.3684%" y="245" width="1.3158%" height="15" fill="rgb(229,67,23)" fg:x="36" fg:w="1"/><text x="47.6184%" y="255.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="47.3684%" y="229" width="1.3158%" height="15" fill="rgb(249,83,47)" fg:x="36" fg:w="1"/><text x="47.6184%" y="239.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="47.3684%" y="213" width="1.3158%" height="15" fill="rgb(215,43,3)" fg:x="36" fg:w="1"/><text x="47.6184%" y="223.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (1 samples, 1.32%)</title><rect x="48.6842%" y="357" width="1.3158%" height="15" fill="rgb(238,154,13)" fg:x="37" fg:w="1"/><text x="48.9342%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 1.32%)</title><rect x="48.6842%" y="341" width="1.3158%" height="15" fill="rgb(219,56,2)" fg:x="37" fg:w="1"/><text x="48.9342%" y="351.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 1.32%)</title><rect x="48.6842%" y="325" width="1.3158%" height="15" fill="rgb(233,0,4)" fg:x="37" fg:w="1"/><text x="48.9342%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 1.32%)</title><rect x="48.6842%" y="309" width="1.3158%" height="15" fill="rgb(235,30,7)" fg:x="37" fg:w="1"/><text x="48.9342%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 1.32%)</title><rect x="48.6842%" y="293" width="1.3158%" height="15" fill="rgb(250,79,13)" fg:x="37" fg:w="1"/><text x="48.9342%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 1.32%)</title><rect x="48.6842%" y="277" width="1.3158%" height="15" fill="rgb(211,146,34)" fg:x="37" fg:w="1"/><text x="48.9342%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 1.32%)</title><rect x="48.6842%" y="261" width="1.3158%" height="15" fill="rgb(228,22,38)" fg:x="37" fg:w="1"/><text x="48.9342%" y="271.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="48.6842%" y="245" width="1.3158%" height="15" fill="rgb(235,168,5)" fg:x="37" fg:w="1"/><text x="48.9342%" y="255.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="48.6842%" y="229" width="1.3158%" height="15" fill="rgb(221,155,16)" fg:x="37" fg:w="1"/><text x="48.9342%" y="239.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="48.6842%" y="213" width="1.3158%" height="15" fill="rgb(215,215,53)" fg:x="37" fg:w="1"/><text x="48.9342%" y="223.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (19 samples, 25.00%)</title><rect x="50.0000%" y="357" width="25.0000%" height="15" fill="rgb(223,4,10)" fg:x="38" fg:w="19"/><text x="50.2500%" y="367.50">&lt;pprof::backtrace::backtrace_rs::Trace a..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (19 samples, 25.00%)</title><rect x="50.0000%" y="341" width="25.0000%" height="15" fill="rgb(234,103,6)" fg:x="38" fg:w="19"/><text x="50.2500%" y="351.50">backtrace::backtrace::trace_unsynchroniz..</text></g><g><title>backtrace::backtrace::libunwind::trace (19 samples, 25.00%)</title><rect x="50.0000%" y="325" width="25.0000%" height="15" fill="rgb(227,97,0)" fg:x="38" fg:w="19"/><text x="50.2500%" y="335.50">backtrace::backtrace::libunwind::trace</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 1.32%)</title><rect x="75.0000%" y="357" width="1.3158%" height="15" fill="rgb(234,150,53)" fg:x="57" fg:w="1"/><text x="75.2500%" y="367.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="75.0000%" y="341" width="1.3158%" height="15" fill="rgb(228,201,54)" fg:x="57" fg:w="1"/><text x="75.2500%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="75.0000%" y="325" width="1.3158%" height="15" fill="rgb(222,22,37)" fg:x="57" fg:w="1"/><text x="75.2500%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="75.0000%" y="309" width="1.3158%" height="15" fill="rgb(237,53,32)" fg:x="57" fg:w="1"/><text x="75.2500%" y="319.50"></text></g><g><title>lib_ruby_parser::builder::Builder::call_method (1 samples, 1.32%)</title><rect x="76.3158%" y="357" width="1.3158%" height="15" fill="rgb(233,25,53)" fg:x="58" fg:w="1"/><text x="76.5658%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 1.32%)</title><rect x="76.3158%" y="341" width="1.3158%" height="15" fill="rgb(210,40,34)" fg:x="58" fg:w="1"/><text x="76.5658%" y="351.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 1.32%)</title><rect x="76.3158%" y="325" width="1.3158%" height="15" fill="rgb(241,220,44)" fg:x="58" fg:w="1"/><text x="76.5658%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 1.32%)</title><rect x="76.3158%" y="309" width="1.3158%" height="15" fill="rgb(235,28,35)" fg:x="58" fg:w="1"/><text x="76.5658%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 1.32%)</title><rect x="76.3158%" y="293" width="1.3158%" height="15" fill="rgb(210,56,17)" fg:x="58" fg:w="1"/><text x="76.5658%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 1.32%)</title><rect x="76.3158%" y="277" width="1.3158%" height="15" fill="rgb(224,130,29)" fg:x="58" fg:w="1"/><text x="76.5658%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 1.32%)</title><rect x="76.3158%" y="261" width="1.3158%" height="15" fill="rgb(235,212,8)" fg:x="58" fg:w="1"/><text x="76.5658%" y="271.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="76.3158%" y="245" width="1.3158%" height="15" fill="rgb(223,33,50)" fg:x="58" fg:w="1"/><text x="76.5658%" y="255.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="76.3158%" y="229" width="1.3158%" height="15" fill="rgb(219,149,13)" fg:x="58" fg:w="1"/><text x="76.5658%" y="239.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="76.3158%" y="213" width="1.3158%" height="15" fill="rgb(250,156,29)" fg:x="58" fg:w="1"/><text x="76.5658%" y="223.50"></text></g><g><title>lib_ruby_parser::builder::Builder::compstmt (1 samples, 1.32%)</title><rect x="77.6316%" y="357" width="1.3158%" height="15" fill="rgb(216,193,19)" fg:x="59" fg:w="1"/><text x="77.8816%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 1.32%)</title><rect x="77.6316%" y="341" width="1.3158%" height="15" fill="rgb(216,135,14)" fg:x="59" fg:w="1"/><text x="77.8816%" y="351.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 1.32%)</title><rect x="77.6316%" y="325" width="1.3158%" height="15" fill="rgb(241,47,5)" fg:x="59" fg:w="1"/><text x="77.8816%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 1.32%)</title><rect x="77.6316%" y="309" width="1.3158%" height="15" fill="rgb(233,42,35)" fg:x="59" fg:w="1"/><text x="77.8816%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 1.32%)</title><rect x="77.6316%" y="293" width="1.3158%" height="15" fill="rgb(231,13,6)" fg:x="59" fg:w="1"/><text x="77.8816%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 1.32%)</title><rect x="77.6316%" y="277" width="1.3158%" height="15" fill="rgb(207,181,40)" fg:x="59" fg:w="1"/><text x="77.8816%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 1.32%)</title><rect x="77.6316%" y="261" width="1.3158%" height="15" fill="rgb(254,173,49)" fg:x="59" fg:w="1"/><text x="77.8816%" y="271.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="77.6316%" y="245" width="1.3158%" height="15" fill="rgb(221,1,38)" fg:x="59" fg:w="1"/><text x="77.8816%" y="255.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="77.6316%" y="229" width="1.3158%" height="15" fill="rgb(206,124,46)" fg:x="59" fg:w="1"/><text x="77.8816%" y="239.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="77.6316%" y="213" width="1.3158%" height="15" fill="rgb(249,21,11)" fg:x="59" fg:w="1"/><text x="77.8816%" y="223.50"></text></g><g><title>lib_ruby_parser::builder::Builder::lvar (1 samples, 1.32%)</title><rect x="78.9474%" y="357" width="1.3158%" height="15" fill="rgb(222,201,40)" fg:x="60" fg:w="1"/><text x="79.1974%" y="367.50"></text></g><g><title>&lt;alloc_from_pool::pool_value::PoolValue&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 1.32%)</title><rect x="78.9474%" y="341" width="1.3158%" height="15" fill="rgb(235,61,29)" fg:x="60" fg:w="1"/><text x="79.1974%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::as_ref (1 samples, 1.32%)</title><rect x="78.9474%" y="325" width="1.3158%" height="15" fill="rgb(219,207,3)" fg:x="60" fg:w="1"/><text x="79.1974%" y="335.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="78.9474%" y="309" width="1.3158%" height="15" fill="rgb(222,56,46)" fg:x="60" fg:w="1"/><text x="79.1974%" y="319.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="78.9474%" y="293" width="1.3158%" height="15" fill="rgb(239,76,54)" fg:x="60" fg:w="1"/><text x="79.1974%" y="303.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="78.9474%" y="277" width="1.3158%" height="15" fill="rgb(231,124,27)" fg:x="60" fg:w="1"/><text x="79.1974%" y="287.50"></text></g><g><title>lib_ruby_parser::builder::clone_value (1 samples, 1.32%)</title><rect x="80.2632%" y="357" width="1.3158%" height="15" fill="rgb(249,195,6)" fg:x="61" fg:w="1"/><text x="80.5132%" y="367.50"></text></g><g><title>lib_ruby_parser::token::Token::to_string_lossy (1 samples, 1.32%)</title><rect x="80.2632%" y="341" width="1.3158%" height="15" fill="rgb(237,174,47)" fg:x="61" fg:w="1"/><text x="80.5132%" y="351.50"></text></g><g><title>lib_ruby_parser_ast::bytes::Bytes::to_string_lossy (1 samples, 1.32%)</title><rect x="80.2632%" y="325" width="1.3158%" height="15" fill="rgb(206,201,31)" fg:x="61" fg:w="1"/><text x="80.5132%" y="335.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (1 samples, 1.32%)</title><rect x="80.2632%" y="309" width="1.3158%" height="15" fill="rgb(231,57,52)" fg:x="61" fg:w="1"/><text x="80.5132%" y="319.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 1.32%)</title><rect x="80.2632%" y="293" width="1.3158%" height="15" fill="rgb(248,177,22)" fg:x="61" fg:w="1"/><text x="80.5132%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 1.32%)</title><rect x="80.2632%" y="277" width="1.3158%" height="15" fill="rgb(215,211,37)" fg:x="61" fg:w="1"/><text x="80.5132%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 1.32%)</title><rect x="80.2632%" y="261" width="1.3158%" height="15" fill="rgb(241,128,51)" fg:x="61" fg:w="1"/><text x="80.5132%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 1.32%)</title><rect x="80.2632%" y="245" width="1.3158%" height="15" fill="rgb(227,165,31)" fg:x="61" fg:w="1"/><text x="80.5132%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 1.32%)</title><rect x="80.2632%" y="229" width="1.3158%" height="15" fill="rgb(228,167,24)" fg:x="61" fg:w="1"/><text x="80.5132%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 1.32%)</title><rect x="80.2632%" y="213" width="1.3158%" height="15" fill="rgb(228,143,12)" fg:x="61" fg:w="1"/><text x="80.5132%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 1.32%)</title><rect x="80.2632%" y="197" width="1.3158%" height="15" fill="rgb(249,149,8)" fg:x="61" fg:w="1"/><text x="80.5132%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 1.32%)</title><rect x="80.2632%" y="181" width="1.3158%" height="15" fill="rgb(243,35,44)" fg:x="61" fg:w="1"/><text x="80.5132%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 1.32%)</title><rect x="80.2632%" y="165" width="1.3158%" height="15" fill="rgb(246,89,9)" fg:x="61" fg:w="1"/><text x="80.5132%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 1.32%)</title><rect x="80.2632%" y="149" width="1.3158%" height="15" fill="rgb(233,213,13)" fg:x="61" fg:w="1"/><text x="80.5132%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 1.32%)</title><rect x="80.2632%" y="133" width="1.3158%" height="15" fill="rgb(233,141,41)" fg:x="61" fg:w="1"/><text x="80.5132%" y="143.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="80.2632%" y="117" width="1.3158%" height="15" fill="rgb(239,167,4)" fg:x="61" fg:w="1"/><text x="80.5132%" y="127.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="80.2632%" y="101" width="1.3158%" height="15" fill="rgb(209,217,16)" fg:x="61" fg:w="1"/><text x="80.5132%" y="111.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="80.2632%" y="85" width="1.3158%" height="15" fill="rgb(219,88,35)" fg:x="61" fg:w="1"/><text x="80.5132%" y="95.50"></text></g><g><title>lib_ruby_parser::current_arg_stack::CurrentArgStack::set (1 samples, 1.32%)</title><rect x="81.5789%" y="357" width="1.3158%" height="15" fill="rgb(220,193,23)" fg:x="62" fg:w="1"/><text x="81.8289%" y="367.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="81.5789%" y="341" width="1.3158%" height="15" fill="rgb(230,90,52)" fg:x="62" fg:w="1"/><text x="81.8289%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="81.5789%" y="325" width="1.3158%" height="15" fill="rgb(252,106,19)" fg:x="62" fg:w="1"/><text x="81.8289%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="81.5789%" y="309" width="1.3158%" height="15" fill="rgb(206,74,20)" fg:x="62" fg:w="1"/><text x="81.8289%" y="319.50"></text></g><g><title>lib_ruby_parser::parse_value::ParseValue::new_do_body (1 samples, 1.32%)</title><rect x="82.8947%" y="357" width="1.3158%" height="15" fill="rgb(230,138,44)" fg:x="63" fg:w="1"/><text x="83.1447%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 1.32%)</title><rect x="82.8947%" y="341" width="1.3158%" height="15" fill="rgb(235,182,43)" fg:x="63" fg:w="1"/><text x="83.1447%" y="351.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 1.32%)</title><rect x="82.8947%" y="325" width="1.3158%" height="15" fill="rgb(242,16,51)" fg:x="63" fg:w="1"/><text x="83.1447%" y="335.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="82.8947%" y="309" width="1.3158%" height="15" fill="rgb(248,9,4)" fg:x="63" fg:w="1"/><text x="83.1447%" y="319.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="82.8947%" y="293" width="1.3158%" height="15" fill="rgb(210,31,22)" fg:x="63" fg:w="1"/><text x="83.1447%" y="303.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="82.8947%" y="277" width="1.3158%" height="15" fill="rgb(239,54,39)" fg:x="63" fg:w="1"/><text x="83.1447%" y="287.50"></text></g><g><title>lib_ruby_parser::parse_value::ParseValue::new_opt_paren_args (1 samples, 1.32%)</title><rect x="84.2105%" y="357" width="1.3158%" height="15" fill="rgb(230,99,41)" fg:x="64" fg:w="1"/><text x="84.4605%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 1.32%)</title><rect x="84.2105%" y="341" width="1.3158%" height="15" fill="rgb(253,106,12)" fg:x="64" fg:w="1"/><text x="84.4605%" y="351.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 1.32%)</title><rect x="84.2105%" y="325" width="1.3158%" height="15" fill="rgb(213,46,41)" fg:x="64" fg:w="1"/><text x="84.4605%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 1.32%)</title><rect x="84.2105%" y="309" width="1.3158%" height="15" fill="rgb(215,133,35)" fg:x="64" fg:w="1"/><text x="84.4605%" y="319.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="84.2105%" y="293" width="1.3158%" height="15" fill="rgb(213,28,5)" fg:x="64" fg:w="1"/><text x="84.4605%" y="303.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="84.2105%" y="277" width="1.3158%" height="15" fill="rgb(215,77,49)" fg:x="64" fg:w="1"/><text x="84.4605%" y="287.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="84.2105%" y="261" width="1.3158%" height="15" fill="rgb(248,100,22)" fg:x="64" fg:w="1"/><text x="84.4605%" y="271.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="85.5263%" y="341" width="1.3158%" height="15" fill="rgb(208,67,9)" fg:x="65" fg:w="1"/><text x="85.7763%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="85.5263%" y="325" width="1.3158%" height="15" fill="rgb(219,133,21)" fg:x="65" fg:w="1"/><text x="85.7763%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="85.5263%" y="309" width="1.3158%" height="15" fill="rgb(246,46,29)" fg:x="65" fg:w="1"/><text x="85.7763%" y="319.50"></text></g><g><title>lib_ruby_parser::parser::parse::Parser::yy_lr_goto_state (3 samples, 3.95%)</title><rect x="85.5263%" y="357" width="3.9474%" height="15" fill="rgb(246,185,52)" fg:x="65" fg:w="3"/><text x="85.7763%" y="367.50">lib_..</text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (2 samples, 2.63%)</title><rect x="86.8421%" y="341" width="2.6316%" height="15" fill="rgb(252,136,11)" fg:x="66" fg:w="2"/><text x="87.0921%" y="351.50">co..</text></g><g><title>core::ops::range::RangeBounds::contains (2 samples, 2.63%)</title><rect x="86.8421%" y="325" width="2.6316%" height="15" fill="rgb(219,138,53)" fg:x="66" fg:w="2"/><text x="87.0921%" y="335.50">co..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::le (2 samples, 2.63%)</title><rect x="86.8421%" y="309" width="2.6316%" height="15" fill="rgb(211,51,23)" fg:x="66" fg:w="2"/><text x="87.0921%" y="319.50">co..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::le (2 samples, 2.63%)</title><rect x="86.8421%" y="293" width="2.6316%" height="15" fill="rgb(247,221,28)" fg:x="66" fg:w="2"/><text x="87.0921%" y="303.50">co..</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 2.63%)</title><rect x="86.8421%" y="277" width="2.6316%" height="15" fill="rgb(251,222,45)" fg:x="66" fg:w="2"/><text x="87.0921%" y="287.50">&lt;p..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 2.63%)</title><rect x="86.8421%" y="261" width="2.6316%" height="15" fill="rgb(217,162,53)" fg:x="66" fg:w="2"/><text x="87.0921%" y="271.50">ba..</text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 2.63%)</title><rect x="86.8421%" y="245" width="2.6316%" height="15" fill="rgb(229,93,14)" fg:x="66" fg:w="2"/><text x="87.0921%" y="255.50">ba..</text></g><g><title>lib_ruby_parser::parser::parse::YYStack::owned_value_at (2 samples, 2.63%)</title><rect x="89.4737%" y="357" width="2.6316%" height="15" fill="rgb(209,67,49)" fg:x="68" fg:w="2"/><text x="89.7237%" y="367.50">li..</text></g><g><title>core::mem::take (2 samples, 2.63%)</title><rect x="89.4737%" y="341" width="2.6316%" height="15" fill="rgb(213,87,29)" fg:x="68" fg:w="2"/><text x="89.7237%" y="351.50">co..</text></g><g><title>core::mem::replace (2 samples, 2.63%)</title><rect x="89.4737%" y="325" width="2.6316%" height="15" fill="rgb(205,151,52)" fg:x="68" fg:w="2"/><text x="89.7237%" y="335.50">co..</text></g><g><title>core::ptr::write (2 samples, 2.63%)</title><rect x="89.4737%" y="309" width="2.6316%" height="15" fill="rgb(253,215,39)" fg:x="68" fg:w="2"/><text x="89.7237%" y="319.50">co..</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 2.63%)</title><rect x="89.4737%" y="293" width="2.6316%" height="15" fill="rgb(221,220,41)" fg:x="68" fg:w="2"/><text x="89.7237%" y="303.50">&lt;p..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 2.63%)</title><rect x="89.4737%" y="277" width="2.6316%" height="15" fill="rgb(218,133,21)" fg:x="68" fg:w="2"/><text x="89.7237%" y="287.50">ba..</text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 2.63%)</title><rect x="89.4737%" y="261" width="2.6316%" height="15" fill="rgb(221,193,43)" fg:x="68" fg:w="2"/><text x="89.7237%" y="271.50">ba..</text></g><g><title>lib_ruby_parser::parser::parse::YYStack::pop_n (1 samples, 1.32%)</title><rect x="92.1053%" y="357" width="1.3158%" height="15" fill="rgb(240,128,52)" fg:x="70" fg:w="1"/><text x="92.3553%" y="367.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="92.1053%" y="341" width="1.3158%" height="15" fill="rgb(253,114,12)" fg:x="70" fg:w="1"/><text x="92.3553%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="92.1053%" y="325" width="1.3158%" height="15" fill="rgb(215,223,47)" fg:x="70" fg:w="1"/><text x="92.3553%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="92.1053%" y="309" width="1.3158%" height="15" fill="rgb(248,225,23)" fg:x="70" fg:w="1"/><text x="92.3553%" y="319.50"></text></g><g><title>lib_ruby_parser::parser::parse::YYStack::push (1 samples, 1.32%)</title><rect x="93.4211%" y="357" width="1.3158%" height="15" fill="rgb(250,108,0)" fg:x="71" fg:w="1"/><text x="93.6711%" y="367.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="93.4211%" y="341" width="1.3158%" height="15" fill="rgb(228,208,7)" fg:x="71" fg:w="1"/><text x="93.6711%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="93.4211%" y="325" width="1.3158%" height="15" fill="rgb(244,45,10)" fg:x="71" fg:w="1"/><text x="93.6711%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="93.4211%" y="309" width="1.3158%" height="15" fill="rgb(207,125,25)" fg:x="71" fg:w="1"/><text x="93.6711%" y="319.50"></text></g><g><title>lib_ruby_parser::parser::parse::Parser::do_parse (73 samples, 96.05%)</title><rect x="0.0000%" y="405" width="96.0526%" height="15" fill="rgb(210,195,18)" fg:x="0" fg:w="73"/><text x="0.2500%" y="415.50">lib_ruby_parser::parser::parse::Parser::do_parse</text></g><g><title>lib_ruby_parser::parser::parse::Parser::parse (73 samples, 96.05%)</title><rect x="0.0000%" y="389" width="96.0526%" height="15" fill="rgb(249,80,12)" fg:x="0" fg:w="73"/><text x="0.2500%" y="399.50">lib_ruby_parser::parser::parse::Parser::parse</text></g><g><title>lib_ruby_parser::parser::parse::Parser::yyaction (36 samples, 47.37%)</title><rect x="48.6842%" y="373" width="47.3684%" height="15" fill="rgb(221,65,9)" fg:x="37" fg:w="36"/><text x="48.9342%" y="383.50">lib_ruby_parser::parser::parse::Parser::yyaction</text></g><g><title>lib_ruby_parser::static_environment::StaticEnvironment::declare (1 samples, 1.32%)</title><rect x="94.7368%" y="357" width="1.3158%" height="15" fill="rgb(235,49,36)" fg:x="72" fg:w="1"/><text x="94.9868%" y="367.50"></text></g><g><title>alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::insert (1 samples, 1.32%)</title><rect x="94.7368%" y="341" width="1.3158%" height="15" fill="rgb(225,32,20)" fg:x="72" fg:w="1"/><text x="94.9868%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 1.32%)</title><rect x="94.7368%" y="325" width="1.3158%" height="15" fill="rgb(215,141,46)" fg:x="72" fg:w="1"/><text x="94.9868%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 1.32%)</title><rect x="94.7368%" y="309" width="1.3158%" height="15" fill="rgb(250,160,47)" fg:x="72" fg:w="1"/><text x="94.9868%" y="319.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;::push (1 samples, 1.32%)</title><rect x="94.7368%" y="293" width="1.3158%" height="15" fill="rgb(216,222,40)" fg:x="72" fg:w="1"/><text x="94.9868%" y="303.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;::push_with_handle (1 samples, 1.32%)</title><rect x="94.7368%" y="277" width="1.3158%" height="15" fill="rgb(234,217,39)" fg:x="72" fg:w="1"/><text x="94.9868%" y="287.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 1.32%)</title><rect x="94.7368%" y="261" width="1.3158%" height="15" fill="rgb(207,178,40)" fg:x="72" fg:w="1"/><text x="94.9868%" y="271.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 1.32%)</title><rect x="94.7368%" y="245" width="1.3158%" height="15" fill="rgb(221,136,13)" fg:x="72" fg:w="1"/><text x="94.9868%" y="255.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 1.32%)</title><rect x="94.7368%" y="229" width="1.3158%" height="15" fill="rgb(249,199,10)" fg:x="72" fg:w="1"/><text x="94.9868%" y="239.50"></text></g><g><title>all (76 samples, 100%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(249,222,13)" fg:x="0" fg:w="76"/><text x="0.2500%" y="735.50"></text></g><g><title>parse (76 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(244,185,38)" fg:x="0" fg:w="76"/><text x="0.2500%" y="719.50">parse</text></g><g><title>_start (76 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(236,202,9)" fg:x="0" fg:w="76"/><text x="0.2500%" y="703.50">_start</text></g><g><title>__libc_start_main (76 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(250,229,37)" fg:x="0" fg:w="76"/><text x="0.2500%" y="687.50">__libc_start_main</text></g><g><title>main (76 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(206,174,23)" fg:x="0" fg:w="76"/><text x="0.2500%" y="671.50">main</text></g><g><title>std::rt::lang_start (76 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(211,33,43)" fg:x="0" fg:w="76"/><text x="0.2500%" y="655.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (76 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(245,58,50)" fg:x="0" fg:w="76"/><text x="0.2500%" y="639.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (76 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(244,68,36)" fg:x="0" fg:w="76"/><text x="0.2500%" y="623.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (76 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(232,229,15)" fg:x="0" fg:w="76"/><text x="0.2500%" y="607.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (76 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(254,30,23)" fg:x="0" fg:w="76"/><text x="0.2500%" y="591.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (76 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(235,160,14)" fg:x="0" fg:w="76"/><text x="0.2500%" y="575.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (76 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(212,155,44)" fg:x="0" fg:w="76"/><text x="0.2500%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (76 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(226,2,50)" fg:x="0" fg:w="76"/><text x="0.2500%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (76 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(234,177,6)" fg:x="0" fg:w="76"/><text x="0.2500%" y="527.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (76 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(217,24,9)" fg:x="0" fg:w="76"/><text x="0.2500%" y="511.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (76 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(220,13,46)" fg:x="0" fg:w="76"/><text x="0.2500%" y="495.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (76 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(239,221,27)" fg:x="0" fg:w="76"/><text x="0.2500%" y="479.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (76 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(222,198,25)" fg:x="0" fg:w="76"/><text x="0.2500%" y="463.50">core::ops::function::FnOnce::call_once</text></g><g><title>parse::main (76 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(211,99,13)" fg:x="0" fg:w="76"/><text x="0.2500%" y="447.50">parse::main</text></g><g><title>parse::helpers::parse::parse (76 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(232,111,31)" fg:x="0" fg:w="76"/><text x="0.2500%" y="431.50">parse::helpers::parse::parse</text></g><g><title>lib_ruby_parser::parser::parse::Parser::new (3 samples, 3.95%)</title><rect x="96.0526%" y="405" width="3.9474%" height="15" fill="rgb(245,82,37)" fg:x="73" fg:w="3"/><text x="96.3026%" y="415.50">lib_..</text></g><g><title>lib_ruby_parser::lexer::main::Lexer::new (3 samples, 3.95%)</title><rect x="96.0526%" y="389" width="3.9474%" height="15" fill="rgb(227,149,46)" fg:x="73" fg:w="3"/><text x="96.3026%" y="399.50">lib_..</text></g><g><title>lib_ruby_parser::source::buffer::Buffer::new (3 samples, 3.95%)</title><rect x="96.0526%" y="373" width="3.9474%" height="15" fill="rgb(218,36,50)" fg:x="73" fg:w="3"/><text x="96.3026%" y="383.50">lib_..</text></g><g><title>lib_ruby_parser::source::input::Input::update_bytes (3 samples, 3.95%)</title><rect x="96.0526%" y="357" width="3.9474%" height="15" fill="rgb(226,80,48)" fg:x="73" fg:w="3"/><text x="96.3026%" y="367.50">lib_..</text></g><g><title>lib_ruby_parser::source::decoded_input::DecodedInput::update_bytes (3 samples, 3.95%)</title><rect x="96.0526%" y="341" width="3.9474%" height="15" fill="rgb(238,224,15)" fg:x="73" fg:w="3"/><text x="96.3026%" y="351.50">lib_..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 3.95%)</title><rect x="96.0526%" y="325" width="3.9474%" height="15" fill="rgb(241,136,10)" fg:x="73" fg:w="3"/><text x="96.3026%" y="335.50">&lt;cor..</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (3 samples, 3.95%)</title><rect x="96.0526%" y="309" width="3.9474%" height="15" fill="rgb(208,32,45)" fg:x="73" fg:w="3"/><text x="96.3026%" y="319.50">&lt;ppr..</text></g><g><title>backtrace::backtrace::trace_unsynchronized (3 samples, 3.95%)</title><rect x="96.0526%" y="293" width="3.9474%" height="15" fill="rgb(207,135,9)" fg:x="73" fg:w="3"/><text x="96.3026%" y="303.50">back..</text></g><g><title>backtrace::backtrace::libunwind::trace (3 samples, 3.95%)</title><rect x="96.0526%" y="277" width="3.9474%" height="15" fill="rgb(206,86,44)" fg:x="73" fg:w="3"/><text x="96.3026%" y="287.50">back..</text></g></svg></svg>
